#!/usr/bin/env python
# Copyright (C) 2013 Johnny Vestergaard <jkv@unixcluster.dk>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import curses

import logging
from argparse import ArgumentParser
import shutil
import sys
import os

import gevent
import gevent.monkey
from gevent import Greenlet
import beeswarm

from beeswarm.hive.hive import Hive
from beeswarm.beekeeper.beekeeper import Beekeeper
from beeswarm.feeder.feeder import Feeder
from beeswarm.errors import ConfigNotFound
from beeswarm.shared.helpers import is_url, create_self_signed_cert
from beeswarm.shared.models.ui_handler import CursesLogHandler

gevent.monkey.patch_all()

logger = logging.getLogger()


def setuplogging(logfile, verbose, show_ui=False):

    """
        Sets up logging to the logfiles/console. If show_ui is true, a curses screen is
        initialized and returned.
    :param logfile: Path of the file to write logs to.
    :param verbose: If True, enables verbose logging.
    :param show_ui: If True, displays a status screen using curses, with a running log.
    :return: If show_ui is True, returns a `curses.Window` object representing the entire screen
    """
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)

    formatter = logging.Formatter('%(asctime)-15s (%(name)s) %(message)s')

    if verbose:
        loglevel = logging.DEBUG
    else:
        loglevel = logging.INFO

    curses_screen = None
    if not show_ui:
        console_log = logging.StreamHandler()
        console_log.addFilter(LogFilter())
        console_log.setLevel(loglevel)
        console_log.setFormatter(formatter)
        root_logger.addHandler(console_log)
    else:
        curses_screen = curses.initscr()
        curses.noecho()
        curses.cbreak()
        curses.curs_set(0)
        h, w = curses_screen.getmaxyx()
        log_win = curses_screen.subwin(10, w, h-10, 0)
        curses_log = CursesLogHandler(log_win)
        curses_log.addFilter(LogFilter())
        curses_log.setLevel(loglevel)
        curses_log.setFormatter(formatter)
        root_logger.addHandler(curses_log)

    file_log = logging.FileHandler(logfile)
    file_log.setLevel(logging.DEBUG)
    file_log.setFormatter(formatter)
    root_logger.addHandler(file_log)
    return curses_screen


class LogFilter(logging.Filter):
    def filter(self, rec):
        if rec.name == 'paramiko.transport':
            return False
        else:
            return True


if __name__ == '__main__':
    parser = ArgumentParser(description='Beeswarm')

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-hi', '--hive', action='store_true', help='Starts beeswarm in hive mode.')
    group.add_argument('-fe', '--feeder', action='store_true', help='Starts beeswarm in feeder mode.')
    group.add_argument('-be', '--beekeeper', action='store_true', help='Starts beeswarm in beekeeper mode.')

    parser.add_argument('--config', dest='configarg', help='Name of the config file or URL if configured remotely')
    parser.add_argument('--workdir', dest='workdir', default=os.getcwd())
    parser.add_argument('--logfile', dest='logfile', default='beeswarm.log')
    parser.add_argument('-v', '--verbose', action='store_true', default=False, help='Logs debug messages.')
    parser.add_argument('-ui', '--userinterface', action='store_true', default=False, help='Logs debug messages.')
    args = parser.parse_args()

    curses_screen = setuplogging(args.logfile, args.verbose, args.userinterface)

    mode = None
    if args.hive:
        mode = Hive
        prepare = False
        if args.configarg:
            if is_url(args.configarg):
                prepare = True
        #no config file and on data directory
        elif not os.path.isdir(os.path.join(args.workdir, 'data')):
            prepare = True

        if prepare:
            #We have a new Hive being used.
            try:
                mode.prepare_environment(args.workdir)
            except OSError as ex:
                logger.error('Error while preparing work directory, please make sure '
                             'the work directory is empty. ({0})'.format(ex))
                sys.exit(1)

    elif args.feeder:
        mode = Feeder
    elif args.beekeeper:
        mode = Beekeeper
        if not args.configarg:
            # User hasn't specified a config file, so check if the default exists.
            # if not, copy the default file to the work-dir
            package_directory = os.path.dirname(os.path.abspath(beeswarm.__file__))
            config_file = os.path.join(args.workdir, 'beekeepercfg.json')
            if not os.path.isfile(config_file):
                logging.info('Copying configuration file to workdir.')
                create_self_signed_cert(args.workdir, 'beekeeper.crt', 'beekeeper.key')

                shutil.copyfile(os.path.join(package_directory, 'beekeeper/beekeepercfg.json.dist'),
                                os.path.join(args.workdir, 'beekeepercfg.json'))

    try:
        if args.configarg:
            m = mode(args.workdir, config_arg=args.configarg, curses_screen=curses_screen)
        else:
            m = mode(args.workdir, curses_screen=curses_screen)
    except ConfigNotFound as ex:
        logger.error(ex)
        sys.exit(ex)

    mode_greenlet = Greenlet.spawn(m.start)

    try:
        gevent.joinall([mode_greenlet])
    except KeyboardInterrupt as ex:
        m.stop()
    finally:
        gevent.joinall([mode_greenlet], 5)
        # Restore previous terminal state
        curses.initscr()
        curses.nocbreak()
        curses.echo()
        curses.endwin()
