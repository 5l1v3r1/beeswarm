#!/usr/bin/env python
# Copyright (C) 2013 Johnny Vestergaard <jkv@unixcluster.dk>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import logging
from argparse import ArgumentParser
import sys
import os
from ConfigParser import NoSectionError, NoOptionError

import gevent
import gevent.monkey
from gevent import Greenlet

from beeswarm.hive.hive import Hive
from beeswarm.beekeeper.beekeeper import Beekeeper
from beeswarm.feeder.feeder import Feeder
from beeswarm.errors import ConfigNotFound


gevent.monkey.patch_all()

logger = logging.getLogger()


def setuplogging(logfile, verbose):

    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)

    formatter = logging.Formatter('%(asctime)-15s (%(name)s) %(message)s')
    console_log = logging.StreamHandler()

    if verbose:
        loglevel = logging.DEBUG
    else:
        loglevel = logging.INFO

    console_log.addFilter(LogFilter())
    console_log.setLevel(loglevel)
    console_log.setFormatter(formatter)
    root_logger.addHandler(console_log)

    file_log = logging.FileHandler(logfile)
    file_log.setLevel(logging.DEBUG)
    file_log.setFormatter(formatter)
    root_logger.addHandler(file_log)

class LogFilter(logging.Filter):
    def filter(self, rec):
        if rec.name == 'paramiko.transport':
            return False
        else:
            return True

if __name__ == '__main__':
    parser = ArgumentParser(description='Beeswarm')

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-hi', '--hive', action='store_true', help='Starts beeswarm in hive mode.')
    group.add_argument('-fe', '--feeder', action='store_true', help='Starts beeswarm in feeder mode.')
    group.add_argument('-be', '--beekeeper', action='store_true', help='Starts beeswarm in beekeeper mode.')

    parser.add_argument('--prepare', action='store_true', default=False)
    parser.add_argument('--workdir', dest='workdir', default=os.getcwd())
    parser.add_argument('--logfile', dest='logfile', default='beeswarm.log')
    parser.add_argument('-v', '--verbose', action='store_true', default=False, help='Logs debug messages.')
    args = parser.parse_args()

    setuplogging(args.logfile, args.verbose)

    mode = None
    if args.hive:
        mode = Hive
    elif args.feeder:
        mode = Feeder
    elif args.beekeeper:
        mode = Beekeeper

    try:
        if args.prepare:
            try:
                mode.prepare_environment(args.workdir)
            except OSError as ex:
                logger.error('Error while preparing work directory, please make sure '
                             'the work directory is empty. ({0})'.format(ex))
                sys.exit(1)
        m = mode(args.workdir)
    except ConfigNotFound as ex:
        logger.error(ex)
        sys.exit(ex)
    except (NoSectionError, NoOptionError) as ex:
        logger.error('Error while parsing config file. Please check if any '
                     'options has changed since last update. ({0})'.format(ex))
        sys.exit(1)

    mode_greenlet = Greenlet.spawn(m.start)

    try:
        gevent.joinall([mode_greenlet])
    except KeyboardInterrupt as ex:
        m.stop()

    gevent.joinall([mode_greenlet], 5)
