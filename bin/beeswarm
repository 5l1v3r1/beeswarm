#!/usr/bin/env python
# Copyright (C) 2013 Johnny Vestergaard <jkv@unixcluster.dk>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import curses

import logging
import json
from argparse import ArgumentParser
import sys
import os

import gevent
import gevent.monkey

gevent.monkey.patch_all()
from gevent import Greenlet
import requests
from requests.exceptions import Timeout, ConnectionError
import beeswarm

from beeswarm.honeypot.honeypot import Honeypot
from beeswarm.server.server import Server
from beeswarm.client.client import Client
from beeswarm.errors import ConfigNotFound
from beeswarm.shared.helpers import is_url
from beeswarm.shared.models.ui_handler import CursesLogHandler
from beeswarm.shared.asciify import asciify
from beeswarm.shared.helpers import is_url



logger = logging.getLogger()


def setuplogging(logfile, verbose, show_ui=False):

    """
        Sets up logging to the logfiles/console. If show_ui is true, a curses screen is
        initialized and returned.
    :param logfile: Path of the file to write logs to.
    :param verbose: If True, enables verbose logging.
    :param show_ui: If True, displays a status screen using curses, with a running log.
    :return: If show_ui is True, returns a `curses.Window` object representing the entire screen
    """
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)

    formatter = logging.Formatter('%(asctime)-15s (%(name)s) %(message)s')

    if verbose:
        loglevel = logging.DEBUG
    else:
        loglevel = logging.INFO

    curses_screen = None
    if not show_ui:
        console_log = logging.StreamHandler()
        console_log.addFilter(LogFilter())
        console_log.setLevel(loglevel)
        console_log.setFormatter(formatter)
        root_logger.addHandler(console_log)
    else:
        curses_screen = curses.initscr()
        curses.noecho()
        curses.cbreak()
        curses.curs_set(0)
        h, w = curses_screen.getmaxyx()
        log_win = curses_screen.subwin(10, w, h-10, 0)
        curses_log = CursesLogHandler(log_win)
        curses_log.addFilter(LogFilter())
        curses_log.setLevel(loglevel)
        curses_log.setFormatter(formatter)
        root_logger.addHandler(curses_log)

    file_log = logging.FileHandler(logfile)
    file_log.setLevel(logging.DEBUG)
    file_log.setFormatter(formatter)
    root_logger.addHandler(file_log)
    return curses_screen


class LogFilter(logging.Filter):
    def filter(self, rec):
        if rec.name == 'paramiko.transport':
            return False
        else:
            return True


if __name__ == '__main__':
    parser = ArgumentParser(description='Beeswarm')

    group = parser.add_argument_group()
    group.add_argument('-ho', '--honeypot', action='store_true', help='Starts beeswarm in honeypot mode.')
    group.add_argument('-fe', '--client', action='store_true', help='Starts beeswarm in client mode.')
    group.add_argument('-se', '--server', action='store_true', help='Starts beeswarm in server mode.')

    parser.add_argument('--config', dest='configurl', default='', help='Configuration URL to the server service.')
    parser.add_argument('--workdir', dest='workdir', default=os.getcwd())
    parser.add_argument('--logfile', dest='logfile', default='beeswarm.log')
    parser.add_argument('-v', '--verbose', action='store_true', default=False, help='Logs debug messages.')
    parser.add_argument('-ui', '--userinterface', action='store_true', default=False, help='Logs debug messages.')
    args = parser.parse_args()

    curses_screen = setuplogging(args.logfile, args.verbose, args.userinterface)

    mode = None
    config = None
    config_file = None

    if is_url(args.configurl):
        conf = requests.get(args.configurl, verify=False)
        config = json.loads(conf.text, object_hook=asciify)
        with open('beeswarmcfg.json', 'w') as local_config:
            local_config.write(json.dumps(config, indent=4))

    if os.path.isfile('beeswarmcfg.json'):
        with open('beeswarmcfg.json', 'r') as config_file:
            config = json.load(config_file, object_hook=asciify)
            if 'general' in config:
                _mode = config['general']['mode']
                if _mode == 'honeypot':
                    mode = Honeypot
                elif _mode == 'server':
                    mode = Server
                elif _mode == 'client':
                    mode = Client
    elif args.honeypot:
        mode = Honeypot
    elif args.client:
        mode = Client
    elif args.server:
        mode = Server
    else:
        parser.print_help()
        sys.exit(1)

    try:
        m = mode(args.workdir, config, curses_screen=curses_screen)
    except ConfigNotFound as ex:
        logger.error(ex)
        sys.exit(ex)

    mode_greenlet = Greenlet.spawn(m.start)
    gevent.sleep()

    try:
        gevent.joinall([mode_greenlet])
    except KeyboardInterrupt as ex:
        m.stop()
    finally:
        gevent.joinall([mode_greenlet], 5)
        # Restore previous terminal state
        curses.initscr()
        curses.nocbreak()
        curses.echo()
        curses.endwin()
